
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  name: string | null
}

/**
 * Model ActivePage
 * 
 */
export type ActivePage = {
  id: number
  link: string
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  title: string
  content: string | null
  published: boolean | null
  authorId: number | null
}

/**
 * Model ToDoList
 * 
 */
export type ToDoList = {
  id: number
  title: string
  authorId: number | null
}

/**
 * Model ToDoListItem
 * 
 */
export type ToDoListItem = {
  id: number
  title: string
  parentId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.activePage`: Exposes CRUD operations for the **ActivePage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivePages
    * const activePages = await prisma.activePage.findMany()
    * ```
    */
  get activePage(): Prisma.ActivePageDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.toDoList`: Exposes CRUD operations for the **ToDoList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ToDoLists
    * const toDoLists = await prisma.toDoList.findMany()
    * ```
    */
  get toDoList(): Prisma.ToDoListDelegate<GlobalReject>;

  /**
   * `prisma.toDoListItem`: Exposes CRUD operations for the **ToDoListItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ToDoListItems
    * const toDoListItems = await prisma.toDoListItem.findMany()
    * ```
    */
  get toDoListItem(): Prisma.ToDoListItemDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.12.0
   * Query Engine version: 22b822189f46ef0dc5c5b503368d1bee01213980
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    ActivePage: 'ActivePage',
    Post: 'Post',
    ToDoList: 'ToDoList',
    ToDoListItem: 'ToDoListItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    posts: number
    lists: number
  }

  export type UserCountOutputTypeSelect = {
    posts?: boolean
    lists?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ToDoListCountOutputType
   */


  export type ToDoListCountOutputType = {
    items: number
  }

  export type ToDoListCountOutputTypeSelect = {
    items?: boolean
  }

  export type ToDoListCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ToDoListCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ToDoListCountOutputType
    : S extends undefined
    ? never
    : S extends ToDoListCountOutputTypeArgs
    ?'include' extends U
    ? ToDoListCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ToDoListCountOutputType ? ToDoListCountOutputType[P] : never
  } 
    : ToDoListCountOutputType
  : ToDoListCountOutputType




  // Custom InputTypes

  /**
   * ToDoListCountOutputType without action
   */
  export type ToDoListCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ToDoListCountOutputType
     * 
    **/
    select?: ToDoListCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    posts?: boolean | PostFindManyArgs
    lists?: boolean | ToDoListFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    posts?: boolean | PostFindManyArgs
    lists?: boolean | ToDoListFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'lists' ? Array < ToDoListGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'lists' ? Array < ToDoListGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posts<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    lists<T extends ToDoListFindManyArgs = {}>(args?: Subset<T, ToDoListFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ToDoList>>, PrismaPromise<Array<ToDoListGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model ActivePage
   */


  export type AggregateActivePage = {
    _count: ActivePageCountAggregateOutputType | null
    _avg: ActivePageAvgAggregateOutputType | null
    _sum: ActivePageSumAggregateOutputType | null
    _min: ActivePageMinAggregateOutputType | null
    _max: ActivePageMaxAggregateOutputType | null
  }

  export type ActivePageAvgAggregateOutputType = {
    id: number | null
  }

  export type ActivePageSumAggregateOutputType = {
    id: number | null
  }

  export type ActivePageMinAggregateOutputType = {
    id: number | null
    link: string | null
  }

  export type ActivePageMaxAggregateOutputType = {
    id: number | null
    link: string | null
  }

  export type ActivePageCountAggregateOutputType = {
    id: number
    link: number
    _all: number
  }


  export type ActivePageAvgAggregateInputType = {
    id?: true
  }

  export type ActivePageSumAggregateInputType = {
    id?: true
  }

  export type ActivePageMinAggregateInputType = {
    id?: true
    link?: true
  }

  export type ActivePageMaxAggregateInputType = {
    id?: true
    link?: true
  }

  export type ActivePageCountAggregateInputType = {
    id?: true
    link?: true
    _all?: true
  }

  export type ActivePageAggregateArgs = {
    /**
     * Filter which ActivePage to aggregate.
     * 
    **/
    where?: ActivePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivePages to fetch.
     * 
    **/
    orderBy?: Enumerable<ActivePageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ActivePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivePages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivePages
    **/
    _count?: true | ActivePageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivePageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivePageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivePageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivePageMaxAggregateInputType
  }

  export type GetActivePageAggregateType<T extends ActivePageAggregateArgs> = {
        [P in keyof T & keyof AggregateActivePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivePage[P]>
      : GetScalarType<T[P], AggregateActivePage[P]>
  }




  export type ActivePageGroupByArgs = {
    where?: ActivePageWhereInput
    orderBy?: Enumerable<ActivePageOrderByWithAggregationInput>
    by: Array<ActivePageScalarFieldEnum>
    having?: ActivePageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivePageCountAggregateInputType | true
    _avg?: ActivePageAvgAggregateInputType
    _sum?: ActivePageSumAggregateInputType
    _min?: ActivePageMinAggregateInputType
    _max?: ActivePageMaxAggregateInputType
  }


  export type ActivePageGroupByOutputType = {
    id: number
    link: string
    _count: ActivePageCountAggregateOutputType | null
    _avg: ActivePageAvgAggregateOutputType | null
    _sum: ActivePageSumAggregateOutputType | null
    _min: ActivePageMinAggregateOutputType | null
    _max: ActivePageMaxAggregateOutputType | null
  }

  type GetActivePageGroupByPayload<T extends ActivePageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActivePageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivePageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivePageGroupByOutputType[P]>
            : GetScalarType<T[P], ActivePageGroupByOutputType[P]>
        }
      >
    >


  export type ActivePageSelect = {
    id?: boolean
    link?: boolean
  }

  export type ActivePageGetPayload<
    S extends boolean | null | undefined | ActivePageArgs,
    U = keyof S
      > = S extends true
        ? ActivePage
    : S extends undefined
    ? never
    : S extends ActivePageArgs | ActivePageFindManyArgs
    ?'include' extends U
    ? ActivePage 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ActivePage ? ActivePage[P] : never
  } 
    : ActivePage
  : ActivePage


  type ActivePageCountArgs = Merge<
    Omit<ActivePageFindManyArgs, 'select' | 'include'> & {
      select?: ActivePageCountAggregateInputType | true
    }
  >

  export interface ActivePageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ActivePage that matches the filter.
     * @param {ActivePageFindUniqueArgs} args - Arguments to find a ActivePage
     * @example
     * // Get one ActivePage
     * const activePage = await prisma.activePage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivePageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActivePageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ActivePage'> extends True ? CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>> : CheckSelect<T, Prisma__ActivePageClient<ActivePage | null >, Prisma__ActivePageClient<ActivePageGetPayload<T> | null >>

    /**
     * Find the first ActivePage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageFindFirstArgs} args - Arguments to find a ActivePage
     * @example
     * // Get one ActivePage
     * const activePage = await prisma.activePage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivePageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActivePageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ActivePage'> extends True ? CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>> : CheckSelect<T, Prisma__ActivePageClient<ActivePage | null >, Prisma__ActivePageClient<ActivePageGetPayload<T> | null >>

    /**
     * Find zero or more ActivePages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivePages
     * const activePages = await prisma.activePage.findMany()
     * 
     * // Get first 10 ActivePages
     * const activePages = await prisma.activePage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activePageWithIdOnly = await prisma.activePage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActivePageFindManyArgs>(
      args?: SelectSubset<T, ActivePageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ActivePage>>, PrismaPromise<Array<ActivePageGetPayload<T>>>>

    /**
     * Create a ActivePage.
     * @param {ActivePageCreateArgs} args - Arguments to create a ActivePage.
     * @example
     * // Create one ActivePage
     * const ActivePage = await prisma.activePage.create({
     *   data: {
     *     // ... data to create a ActivePage
     *   }
     * })
     * 
    **/
    create<T extends ActivePageCreateArgs>(
      args: SelectSubset<T, ActivePageCreateArgs>
    ): CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>>

    /**
     * Create many ActivePages.
     *     @param {ActivePageCreateManyArgs} args - Arguments to create many ActivePages.
     *     @example
     *     // Create many ActivePages
     *     const activePage = await prisma.activePage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActivePageCreateManyArgs>(
      args?: SelectSubset<T, ActivePageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ActivePage.
     * @param {ActivePageDeleteArgs} args - Arguments to delete one ActivePage.
     * @example
     * // Delete one ActivePage
     * const ActivePage = await prisma.activePage.delete({
     *   where: {
     *     // ... filter to delete one ActivePage
     *   }
     * })
     * 
    **/
    delete<T extends ActivePageDeleteArgs>(
      args: SelectSubset<T, ActivePageDeleteArgs>
    ): CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>>

    /**
     * Update one ActivePage.
     * @param {ActivePageUpdateArgs} args - Arguments to update one ActivePage.
     * @example
     * // Update one ActivePage
     * const activePage = await prisma.activePage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivePageUpdateArgs>(
      args: SelectSubset<T, ActivePageUpdateArgs>
    ): CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>>

    /**
     * Delete zero or more ActivePages.
     * @param {ActivePageDeleteManyArgs} args - Arguments to filter ActivePages to delete.
     * @example
     * // Delete a few ActivePages
     * const { count } = await prisma.activePage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivePageDeleteManyArgs>(
      args?: SelectSubset<T, ActivePageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivePages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivePages
     * const activePage = await prisma.activePage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivePageUpdateManyArgs>(
      args: SelectSubset<T, ActivePageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivePage.
     * @param {ActivePageUpsertArgs} args - Arguments to update or create a ActivePage.
     * @example
     * // Update or create a ActivePage
     * const activePage = await prisma.activePage.upsert({
     *   create: {
     *     // ... data to create a ActivePage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivePage we want to update
     *   }
     * })
    **/
    upsert<T extends ActivePageUpsertArgs>(
      args: SelectSubset<T, ActivePageUpsertArgs>
    ): CheckSelect<T, Prisma__ActivePageClient<ActivePage>, Prisma__ActivePageClient<ActivePageGetPayload<T>>>

    /**
     * Count the number of ActivePages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageCountArgs} args - Arguments to filter ActivePages to count.
     * @example
     * // Count the number of ActivePages
     * const count = await prisma.activePage.count({
     *   where: {
     *     // ... the filter for the ActivePages we want to count
     *   }
     * })
    **/
    count<T extends ActivePageCountArgs>(
      args?: Subset<T, ActivePageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivePageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivePage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivePageAggregateArgs>(args: Subset<T, ActivePageAggregateArgs>): PrismaPromise<GetActivePageAggregateType<T>>

    /**
     * Group by ActivePage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivePageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivePageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivePageGroupByArgs['orderBy'] }
        : { orderBy?: ActivePageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivePageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivePageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivePage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActivePageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ActivePage findUnique
   */
  export type ActivePageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * Throw an Error if a ActivePage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ActivePage to fetch.
     * 
    **/
    where: ActivePageWhereUniqueInput
  }


  /**
   * ActivePage findFirst
   */
  export type ActivePageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * Throw an Error if a ActivePage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ActivePage to fetch.
     * 
    **/
    where?: ActivePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivePages to fetch.
     * 
    **/
    orderBy?: Enumerable<ActivePageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivePages.
     * 
    **/
    cursor?: ActivePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivePages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivePages.
     * 
    **/
    distinct?: Enumerable<ActivePageScalarFieldEnum>
  }


  /**
   * ActivePage findMany
   */
  export type ActivePageFindManyArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * Filter, which ActivePages to fetch.
     * 
    **/
    where?: ActivePageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivePages to fetch.
     * 
    **/
    orderBy?: Enumerable<ActivePageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivePages.
     * 
    **/
    cursor?: ActivePageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivePages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivePages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ActivePageScalarFieldEnum>
  }


  /**
   * ActivePage create
   */
  export type ActivePageCreateArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * The data needed to create a ActivePage.
     * 
    **/
    data: XOR<ActivePageCreateInput, ActivePageUncheckedCreateInput>
  }


  /**
   * ActivePage createMany
   */
  export type ActivePageCreateManyArgs = {
    /**
     * The data used to create many ActivePages.
     * 
    **/
    data: Enumerable<ActivePageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ActivePage update
   */
  export type ActivePageUpdateArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * The data needed to update a ActivePage.
     * 
    **/
    data: XOR<ActivePageUpdateInput, ActivePageUncheckedUpdateInput>
    /**
     * Choose, which ActivePage to update.
     * 
    **/
    where: ActivePageWhereUniqueInput
  }


  /**
   * ActivePage updateMany
   */
  export type ActivePageUpdateManyArgs = {
    /**
     * The data used to update ActivePages.
     * 
    **/
    data: XOR<ActivePageUpdateManyMutationInput, ActivePageUncheckedUpdateManyInput>
    /**
     * Filter which ActivePages to update
     * 
    **/
    where?: ActivePageWhereInput
  }


  /**
   * ActivePage upsert
   */
  export type ActivePageUpsertArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * The filter to search for the ActivePage to update in case it exists.
     * 
    **/
    where: ActivePageWhereUniqueInput
    /**
     * In case the ActivePage found by the `where` argument doesn't exist, create a new ActivePage with this data.
     * 
    **/
    create: XOR<ActivePageCreateInput, ActivePageUncheckedCreateInput>
    /**
     * In case the ActivePage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ActivePageUpdateInput, ActivePageUncheckedUpdateInput>
  }


  /**
   * ActivePage delete
   */
  export type ActivePageDeleteArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
    /**
     * Filter which ActivePage to delete.
     * 
    **/
    where: ActivePageWhereUniqueInput
  }


  /**
   * ActivePage deleteMany
   */
  export type ActivePageDeleteManyArgs = {
    /**
     * Filter which ActivePages to delete
     * 
    **/
    where?: ActivePageWhereInput
  }


  /**
   * ActivePage without action
   */
  export type ActivePageArgs = {
    /**
     * Select specific fields to fetch from the ActivePage
     * 
    **/
    select?: ActivePageSelect | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    content: number
    published: number
    authorId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    title: string
    content: string | null
    published: boolean | null
    authorId: number | null
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
  }

  export type PostInclude = {
    author?: boolean | UserArgs
  }

  export type PostGetPayload<
    S extends boolean | null | undefined | PostArgs,
    U = keyof S
      > = S extends true
        ? Post
    : S extends undefined
    ? never
    : S extends PostArgs | PostFindManyArgs
    ?'include' extends U
    ? Post  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Post ? Post[P] : never
  } 
    : Post
  : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Throw an Error if a Post can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post findFirst
   */
  export type PostFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Throw an Error if a Post can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     * 
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     * 
    **/
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     * 
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     * 
    **/
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     * 
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     * 
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
  }



  /**
   * Model ToDoList
   */


  export type AggregateToDoList = {
    _count: ToDoListCountAggregateOutputType | null
    _avg: ToDoListAvgAggregateOutputType | null
    _sum: ToDoListSumAggregateOutputType | null
    _min: ToDoListMinAggregateOutputType | null
    _max: ToDoListMaxAggregateOutputType | null
  }

  export type ToDoListAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ToDoListSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ToDoListMinAggregateOutputType = {
    id: number | null
    title: string | null
    authorId: number | null
  }

  export type ToDoListMaxAggregateOutputType = {
    id: number | null
    title: string | null
    authorId: number | null
  }

  export type ToDoListCountAggregateOutputType = {
    id: number
    title: number
    authorId: number
    _all: number
  }


  export type ToDoListAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ToDoListSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ToDoListMinAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
  }

  export type ToDoListMaxAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
  }

  export type ToDoListCountAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    _all?: true
  }

  export type ToDoListAggregateArgs = {
    /**
     * Filter which ToDoList to aggregate.
     * 
    **/
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ToDoLists
    **/
    _count?: true | ToDoListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToDoListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToDoListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToDoListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToDoListMaxAggregateInputType
  }

  export type GetToDoListAggregateType<T extends ToDoListAggregateArgs> = {
        [P in keyof T & keyof AggregateToDoList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToDoList[P]>
      : GetScalarType<T[P], AggregateToDoList[P]>
  }




  export type ToDoListGroupByArgs = {
    where?: ToDoListWhereInput
    orderBy?: Enumerable<ToDoListOrderByWithAggregationInput>
    by: Array<ToDoListScalarFieldEnum>
    having?: ToDoListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToDoListCountAggregateInputType | true
    _avg?: ToDoListAvgAggregateInputType
    _sum?: ToDoListSumAggregateInputType
    _min?: ToDoListMinAggregateInputType
    _max?: ToDoListMaxAggregateInputType
  }


  export type ToDoListGroupByOutputType = {
    id: number
    title: string
    authorId: number | null
    _count: ToDoListCountAggregateOutputType | null
    _avg: ToDoListAvgAggregateOutputType | null
    _sum: ToDoListSumAggregateOutputType | null
    _min: ToDoListMinAggregateOutputType | null
    _max: ToDoListMaxAggregateOutputType | null
  }

  type GetToDoListGroupByPayload<T extends ToDoListGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ToDoListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToDoListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToDoListGroupByOutputType[P]>
            : GetScalarType<T[P], ToDoListGroupByOutputType[P]>
        }
      >
    >


  export type ToDoListSelect = {
    id?: boolean
    title?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    items?: boolean | ToDoListItemFindManyArgs
    _count?: boolean | ToDoListCountOutputTypeArgs
  }

  export type ToDoListInclude = {
    author?: boolean | UserArgs
    items?: boolean | ToDoListItemFindManyArgs
    _count?: boolean | ToDoListCountOutputTypeArgs
  }

  export type ToDoListGetPayload<
    S extends boolean | null | undefined | ToDoListArgs,
    U = keyof S
      > = S extends true
        ? ToDoList
    : S extends undefined
    ? never
    : S extends ToDoListArgs | ToDoListFindManyArgs
    ?'include' extends U
    ? ToDoList  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> | null :
        P extends 'items' ? Array < ToDoListItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? ToDoListCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> | null :
        P extends 'items' ? Array < ToDoListItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? ToDoListCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ToDoList ? ToDoList[P] : never
  } 
    : ToDoList
  : ToDoList


  type ToDoListCountArgs = Merge<
    Omit<ToDoListFindManyArgs, 'select' | 'include'> & {
      select?: ToDoListCountAggregateInputType | true
    }
  >

  export interface ToDoListDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ToDoList that matches the filter.
     * @param {ToDoListFindUniqueArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ToDoListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ToDoListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ToDoList'> extends True ? CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>> : CheckSelect<T, Prisma__ToDoListClient<ToDoList | null >, Prisma__ToDoListClient<ToDoListGetPayload<T> | null >>

    /**
     * Find the first ToDoList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListFindFirstArgs} args - Arguments to find a ToDoList
     * @example
     * // Get one ToDoList
     * const toDoList = await prisma.toDoList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ToDoListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ToDoListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ToDoList'> extends True ? CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>> : CheckSelect<T, Prisma__ToDoListClient<ToDoList | null >, Prisma__ToDoListClient<ToDoListGetPayload<T> | null >>

    /**
     * Find zero or more ToDoLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ToDoLists
     * const toDoLists = await prisma.toDoList.findMany()
     * 
     * // Get first 10 ToDoLists
     * const toDoLists = await prisma.toDoList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toDoListWithIdOnly = await prisma.toDoList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ToDoListFindManyArgs>(
      args?: SelectSubset<T, ToDoListFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ToDoList>>, PrismaPromise<Array<ToDoListGetPayload<T>>>>

    /**
     * Create a ToDoList.
     * @param {ToDoListCreateArgs} args - Arguments to create a ToDoList.
     * @example
     * // Create one ToDoList
     * const ToDoList = await prisma.toDoList.create({
     *   data: {
     *     // ... data to create a ToDoList
     *   }
     * })
     * 
    **/
    create<T extends ToDoListCreateArgs>(
      args: SelectSubset<T, ToDoListCreateArgs>
    ): CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>>

    /**
     * Create many ToDoLists.
     *     @param {ToDoListCreateManyArgs} args - Arguments to create many ToDoLists.
     *     @example
     *     // Create many ToDoLists
     *     const toDoList = await prisma.toDoList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ToDoListCreateManyArgs>(
      args?: SelectSubset<T, ToDoListCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ToDoList.
     * @param {ToDoListDeleteArgs} args - Arguments to delete one ToDoList.
     * @example
     * // Delete one ToDoList
     * const ToDoList = await prisma.toDoList.delete({
     *   where: {
     *     // ... filter to delete one ToDoList
     *   }
     * })
     * 
    **/
    delete<T extends ToDoListDeleteArgs>(
      args: SelectSubset<T, ToDoListDeleteArgs>
    ): CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>>

    /**
     * Update one ToDoList.
     * @param {ToDoListUpdateArgs} args - Arguments to update one ToDoList.
     * @example
     * // Update one ToDoList
     * const toDoList = await prisma.toDoList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ToDoListUpdateArgs>(
      args: SelectSubset<T, ToDoListUpdateArgs>
    ): CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>>

    /**
     * Delete zero or more ToDoLists.
     * @param {ToDoListDeleteManyArgs} args - Arguments to filter ToDoLists to delete.
     * @example
     * // Delete a few ToDoLists
     * const { count } = await prisma.toDoList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ToDoListDeleteManyArgs>(
      args?: SelectSubset<T, ToDoListDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ToDoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ToDoLists
     * const toDoList = await prisma.toDoList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ToDoListUpdateManyArgs>(
      args: SelectSubset<T, ToDoListUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ToDoList.
     * @param {ToDoListUpsertArgs} args - Arguments to update or create a ToDoList.
     * @example
     * // Update or create a ToDoList
     * const toDoList = await prisma.toDoList.upsert({
     *   create: {
     *     // ... data to create a ToDoList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ToDoList we want to update
     *   }
     * })
    **/
    upsert<T extends ToDoListUpsertArgs>(
      args: SelectSubset<T, ToDoListUpsertArgs>
    ): CheckSelect<T, Prisma__ToDoListClient<ToDoList>, Prisma__ToDoListClient<ToDoListGetPayload<T>>>

    /**
     * Count the number of ToDoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListCountArgs} args - Arguments to filter ToDoLists to count.
     * @example
     * // Count the number of ToDoLists
     * const count = await prisma.toDoList.count({
     *   where: {
     *     // ... the filter for the ToDoLists we want to count
     *   }
     * })
    **/
    count<T extends ToDoListCountArgs>(
      args?: Subset<T, ToDoListCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToDoListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ToDoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToDoListAggregateArgs>(args: Subset<T, ToDoListAggregateArgs>): PrismaPromise<GetToDoListAggregateType<T>>

    /**
     * Group by ToDoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToDoListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToDoListGroupByArgs['orderBy'] }
        : { orderBy?: ToDoListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToDoListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToDoListGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ToDoList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ToDoListClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    items<T extends ToDoListItemFindManyArgs = {}>(args?: Subset<T, ToDoListItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ToDoListItem>>, PrismaPromise<Array<ToDoListItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ToDoList findUnique
   */
  export type ToDoListFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * Throw an Error if a ToDoList can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ToDoList to fetch.
     * 
    **/
    where: ToDoListWhereUniqueInput
  }


  /**
   * ToDoList findFirst
   */
  export type ToDoListFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * Throw an Error if a ToDoList can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ToDoList to fetch.
     * 
    **/
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ToDoLists.
     * 
    **/
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ToDoLists.
     * 
    **/
    distinct?: Enumerable<ToDoListScalarFieldEnum>
  }


  /**
   * ToDoList findMany
   */
  export type ToDoListFindManyArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * Filter, which ToDoLists to fetch.
     * 
    **/
    where?: ToDoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoLists to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ToDoLists.
     * 
    **/
    cursor?: ToDoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoLists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ToDoListScalarFieldEnum>
  }


  /**
   * ToDoList create
   */
  export type ToDoListCreateArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * The data needed to create a ToDoList.
     * 
    **/
    data: XOR<ToDoListCreateInput, ToDoListUncheckedCreateInput>
  }


  /**
   * ToDoList createMany
   */
  export type ToDoListCreateManyArgs = {
    /**
     * The data used to create many ToDoLists.
     * 
    **/
    data: Enumerable<ToDoListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ToDoList update
   */
  export type ToDoListUpdateArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * The data needed to update a ToDoList.
     * 
    **/
    data: XOR<ToDoListUpdateInput, ToDoListUncheckedUpdateInput>
    /**
     * Choose, which ToDoList to update.
     * 
    **/
    where: ToDoListWhereUniqueInput
  }


  /**
   * ToDoList updateMany
   */
  export type ToDoListUpdateManyArgs = {
    /**
     * The data used to update ToDoLists.
     * 
    **/
    data: XOR<ToDoListUpdateManyMutationInput, ToDoListUncheckedUpdateManyInput>
    /**
     * Filter which ToDoLists to update
     * 
    **/
    where?: ToDoListWhereInput
  }


  /**
   * ToDoList upsert
   */
  export type ToDoListUpsertArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * The filter to search for the ToDoList to update in case it exists.
     * 
    **/
    where: ToDoListWhereUniqueInput
    /**
     * In case the ToDoList found by the `where` argument doesn't exist, create a new ToDoList with this data.
     * 
    **/
    create: XOR<ToDoListCreateInput, ToDoListUncheckedCreateInput>
    /**
     * In case the ToDoList was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ToDoListUpdateInput, ToDoListUncheckedUpdateInput>
  }


  /**
   * ToDoList delete
   */
  export type ToDoListDeleteArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
    /**
     * Filter which ToDoList to delete.
     * 
    **/
    where: ToDoListWhereUniqueInput
  }


  /**
   * ToDoList deleteMany
   */
  export type ToDoListDeleteManyArgs = {
    /**
     * Filter which ToDoLists to delete
     * 
    **/
    where?: ToDoListWhereInput
  }


  /**
   * ToDoList without action
   */
  export type ToDoListArgs = {
    /**
     * Select specific fields to fetch from the ToDoList
     * 
    **/
    select?: ToDoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListInclude | null
  }



  /**
   * Model ToDoListItem
   */


  export type AggregateToDoListItem = {
    _count: ToDoListItemCountAggregateOutputType | null
    _avg: ToDoListItemAvgAggregateOutputType | null
    _sum: ToDoListItemSumAggregateOutputType | null
    _min: ToDoListItemMinAggregateOutputType | null
    _max: ToDoListItemMaxAggregateOutputType | null
  }

  export type ToDoListItemAvgAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type ToDoListItemSumAggregateOutputType = {
    id: number | null
    parentId: number | null
  }

  export type ToDoListItemMinAggregateOutputType = {
    id: number | null
    title: string | null
    parentId: number | null
  }

  export type ToDoListItemMaxAggregateOutputType = {
    id: number | null
    title: string | null
    parentId: number | null
  }

  export type ToDoListItemCountAggregateOutputType = {
    id: number
    title: number
    parentId: number
    _all: number
  }


  export type ToDoListItemAvgAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type ToDoListItemSumAggregateInputType = {
    id?: true
    parentId?: true
  }

  export type ToDoListItemMinAggregateInputType = {
    id?: true
    title?: true
    parentId?: true
  }

  export type ToDoListItemMaxAggregateInputType = {
    id?: true
    title?: true
    parentId?: true
  }

  export type ToDoListItemCountAggregateInputType = {
    id?: true
    title?: true
    parentId?: true
    _all?: true
  }

  export type ToDoListItemAggregateArgs = {
    /**
     * Filter which ToDoListItem to aggregate.
     * 
    **/
    where?: ToDoListItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoListItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ToDoListItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoListItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoListItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ToDoListItems
    **/
    _count?: true | ToDoListItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToDoListItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToDoListItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToDoListItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToDoListItemMaxAggregateInputType
  }

  export type GetToDoListItemAggregateType<T extends ToDoListItemAggregateArgs> = {
        [P in keyof T & keyof AggregateToDoListItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToDoListItem[P]>
      : GetScalarType<T[P], AggregateToDoListItem[P]>
  }




  export type ToDoListItemGroupByArgs = {
    where?: ToDoListItemWhereInput
    orderBy?: Enumerable<ToDoListItemOrderByWithAggregationInput>
    by: Array<ToDoListItemScalarFieldEnum>
    having?: ToDoListItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToDoListItemCountAggregateInputType | true
    _avg?: ToDoListItemAvgAggregateInputType
    _sum?: ToDoListItemSumAggregateInputType
    _min?: ToDoListItemMinAggregateInputType
    _max?: ToDoListItemMaxAggregateInputType
  }


  export type ToDoListItemGroupByOutputType = {
    id: number
    title: string
    parentId: number | null
    _count: ToDoListItemCountAggregateOutputType | null
    _avg: ToDoListItemAvgAggregateOutputType | null
    _sum: ToDoListItemSumAggregateOutputType | null
    _min: ToDoListItemMinAggregateOutputType | null
    _max: ToDoListItemMaxAggregateOutputType | null
  }

  type GetToDoListItemGroupByPayload<T extends ToDoListItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ToDoListItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToDoListItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToDoListItemGroupByOutputType[P]>
            : GetScalarType<T[P], ToDoListItemGroupByOutputType[P]>
        }
      >
    >


  export type ToDoListItemSelect = {
    id?: boolean
    title?: boolean
    parentList?: boolean | ToDoListArgs
    parentId?: boolean
  }

  export type ToDoListItemInclude = {
    parentList?: boolean | ToDoListArgs
  }

  export type ToDoListItemGetPayload<
    S extends boolean | null | undefined | ToDoListItemArgs,
    U = keyof S
      > = S extends true
        ? ToDoListItem
    : S extends undefined
    ? never
    : S extends ToDoListItemArgs | ToDoListItemFindManyArgs
    ?'include' extends U
    ? ToDoListItem  & {
    [P in TrueKeys<S['include']>]:
        P extends 'parentList' ? ToDoListGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'parentList' ? ToDoListGetPayload<S['select'][P]> | null :  P extends keyof ToDoListItem ? ToDoListItem[P] : never
  } 
    : ToDoListItem
  : ToDoListItem


  type ToDoListItemCountArgs = Merge<
    Omit<ToDoListItemFindManyArgs, 'select' | 'include'> & {
      select?: ToDoListItemCountAggregateInputType | true
    }
  >

  export interface ToDoListItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ToDoListItem that matches the filter.
     * @param {ToDoListItemFindUniqueArgs} args - Arguments to find a ToDoListItem
     * @example
     * // Get one ToDoListItem
     * const toDoListItem = await prisma.toDoListItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ToDoListItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ToDoListItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ToDoListItem'> extends True ? CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>> : CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem | null >, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T> | null >>

    /**
     * Find the first ToDoListItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemFindFirstArgs} args - Arguments to find a ToDoListItem
     * @example
     * // Get one ToDoListItem
     * const toDoListItem = await prisma.toDoListItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ToDoListItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ToDoListItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ToDoListItem'> extends True ? CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>> : CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem | null >, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T> | null >>

    /**
     * Find zero or more ToDoListItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ToDoListItems
     * const toDoListItems = await prisma.toDoListItem.findMany()
     * 
     * // Get first 10 ToDoListItems
     * const toDoListItems = await prisma.toDoListItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toDoListItemWithIdOnly = await prisma.toDoListItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ToDoListItemFindManyArgs>(
      args?: SelectSubset<T, ToDoListItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ToDoListItem>>, PrismaPromise<Array<ToDoListItemGetPayload<T>>>>

    /**
     * Create a ToDoListItem.
     * @param {ToDoListItemCreateArgs} args - Arguments to create a ToDoListItem.
     * @example
     * // Create one ToDoListItem
     * const ToDoListItem = await prisma.toDoListItem.create({
     *   data: {
     *     // ... data to create a ToDoListItem
     *   }
     * })
     * 
    **/
    create<T extends ToDoListItemCreateArgs>(
      args: SelectSubset<T, ToDoListItemCreateArgs>
    ): CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>>

    /**
     * Create many ToDoListItems.
     *     @param {ToDoListItemCreateManyArgs} args - Arguments to create many ToDoListItems.
     *     @example
     *     // Create many ToDoListItems
     *     const toDoListItem = await prisma.toDoListItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ToDoListItemCreateManyArgs>(
      args?: SelectSubset<T, ToDoListItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ToDoListItem.
     * @param {ToDoListItemDeleteArgs} args - Arguments to delete one ToDoListItem.
     * @example
     * // Delete one ToDoListItem
     * const ToDoListItem = await prisma.toDoListItem.delete({
     *   where: {
     *     // ... filter to delete one ToDoListItem
     *   }
     * })
     * 
    **/
    delete<T extends ToDoListItemDeleteArgs>(
      args: SelectSubset<T, ToDoListItemDeleteArgs>
    ): CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>>

    /**
     * Update one ToDoListItem.
     * @param {ToDoListItemUpdateArgs} args - Arguments to update one ToDoListItem.
     * @example
     * // Update one ToDoListItem
     * const toDoListItem = await prisma.toDoListItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ToDoListItemUpdateArgs>(
      args: SelectSubset<T, ToDoListItemUpdateArgs>
    ): CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>>

    /**
     * Delete zero or more ToDoListItems.
     * @param {ToDoListItemDeleteManyArgs} args - Arguments to filter ToDoListItems to delete.
     * @example
     * // Delete a few ToDoListItems
     * const { count } = await prisma.toDoListItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ToDoListItemDeleteManyArgs>(
      args?: SelectSubset<T, ToDoListItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ToDoListItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ToDoListItems
     * const toDoListItem = await prisma.toDoListItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ToDoListItemUpdateManyArgs>(
      args: SelectSubset<T, ToDoListItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ToDoListItem.
     * @param {ToDoListItemUpsertArgs} args - Arguments to update or create a ToDoListItem.
     * @example
     * // Update or create a ToDoListItem
     * const toDoListItem = await prisma.toDoListItem.upsert({
     *   create: {
     *     // ... data to create a ToDoListItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ToDoListItem we want to update
     *   }
     * })
    **/
    upsert<T extends ToDoListItemUpsertArgs>(
      args: SelectSubset<T, ToDoListItemUpsertArgs>
    ): CheckSelect<T, Prisma__ToDoListItemClient<ToDoListItem>, Prisma__ToDoListItemClient<ToDoListItemGetPayload<T>>>

    /**
     * Count the number of ToDoListItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemCountArgs} args - Arguments to filter ToDoListItems to count.
     * @example
     * // Count the number of ToDoListItems
     * const count = await prisma.toDoListItem.count({
     *   where: {
     *     // ... the filter for the ToDoListItems we want to count
     *   }
     * })
    **/
    count<T extends ToDoListItemCountArgs>(
      args?: Subset<T, ToDoListItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToDoListItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ToDoListItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToDoListItemAggregateArgs>(args: Subset<T, ToDoListItemAggregateArgs>): PrismaPromise<GetToDoListItemAggregateType<T>>

    /**
     * Group by ToDoListItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToDoListItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToDoListItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToDoListItemGroupByArgs['orderBy'] }
        : { orderBy?: ToDoListItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToDoListItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToDoListItemGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ToDoListItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ToDoListItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    parentList<T extends ToDoListArgs = {}>(args?: Subset<T, ToDoListArgs>): CheckSelect<T, Prisma__ToDoListClient<ToDoList | null >, Prisma__ToDoListClient<ToDoListGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ToDoListItem findUnique
   */
  export type ToDoListItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * Throw an Error if a ToDoListItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ToDoListItem to fetch.
     * 
    **/
    where: ToDoListItemWhereUniqueInput
  }


  /**
   * ToDoListItem findFirst
   */
  export type ToDoListItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * Throw an Error if a ToDoListItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ToDoListItem to fetch.
     * 
    **/
    where?: ToDoListItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoListItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ToDoListItems.
     * 
    **/
    cursor?: ToDoListItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoListItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoListItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ToDoListItems.
     * 
    **/
    distinct?: Enumerable<ToDoListItemScalarFieldEnum>
  }


  /**
   * ToDoListItem findMany
   */
  export type ToDoListItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * Filter, which ToDoListItems to fetch.
     * 
    **/
    where?: ToDoListItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ToDoListItems to fetch.
     * 
    **/
    orderBy?: Enumerable<ToDoListItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ToDoListItems.
     * 
    **/
    cursor?: ToDoListItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ToDoListItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ToDoListItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ToDoListItemScalarFieldEnum>
  }


  /**
   * ToDoListItem create
   */
  export type ToDoListItemCreateArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * The data needed to create a ToDoListItem.
     * 
    **/
    data: XOR<ToDoListItemCreateInput, ToDoListItemUncheckedCreateInput>
  }


  /**
   * ToDoListItem createMany
   */
  export type ToDoListItemCreateManyArgs = {
    /**
     * The data used to create many ToDoListItems.
     * 
    **/
    data: Enumerable<ToDoListItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ToDoListItem update
   */
  export type ToDoListItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * The data needed to update a ToDoListItem.
     * 
    **/
    data: XOR<ToDoListItemUpdateInput, ToDoListItemUncheckedUpdateInput>
    /**
     * Choose, which ToDoListItem to update.
     * 
    **/
    where: ToDoListItemWhereUniqueInput
  }


  /**
   * ToDoListItem updateMany
   */
  export type ToDoListItemUpdateManyArgs = {
    /**
     * The data used to update ToDoListItems.
     * 
    **/
    data: XOR<ToDoListItemUpdateManyMutationInput, ToDoListItemUncheckedUpdateManyInput>
    /**
     * Filter which ToDoListItems to update
     * 
    **/
    where?: ToDoListItemWhereInput
  }


  /**
   * ToDoListItem upsert
   */
  export type ToDoListItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * The filter to search for the ToDoListItem to update in case it exists.
     * 
    **/
    where: ToDoListItemWhereUniqueInput
    /**
     * In case the ToDoListItem found by the `where` argument doesn't exist, create a new ToDoListItem with this data.
     * 
    **/
    create: XOR<ToDoListItemCreateInput, ToDoListItemUncheckedCreateInput>
    /**
     * In case the ToDoListItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ToDoListItemUpdateInput, ToDoListItemUncheckedUpdateInput>
  }


  /**
   * ToDoListItem delete
   */
  export type ToDoListItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
    /**
     * Filter which ToDoListItem to delete.
     * 
    **/
    where: ToDoListItemWhereUniqueInput
  }


  /**
   * ToDoListItem deleteMany
   */
  export type ToDoListItemDeleteManyArgs = {
    /**
     * Filter which ToDoListItems to delete
     * 
    **/
    where?: ToDoListItemWhereInput
  }


  /**
   * ToDoListItem without action
   */
  export type ToDoListItemArgs = {
    /**
     * Select specific fields to fetch from the ToDoListItem
     * 
    **/
    select?: ToDoListItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ToDoListItemInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ActivePageScalarFieldEnum: {
    id: 'id',
    link: 'link'
  };

  export type ActivePageScalarFieldEnum = (typeof ActivePageScalarFieldEnum)[keyof typeof ActivePageScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ToDoListScalarFieldEnum: {
    id: 'id',
    title: 'title',
    authorId: 'authorId'
  };

  export type ToDoListScalarFieldEnum = (typeof ToDoListScalarFieldEnum)[keyof typeof ToDoListScalarFieldEnum]


  export const ToDoListItemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    parentId: 'parentId'
  };

  export type ToDoListItemScalarFieldEnum = (typeof ToDoListItemScalarFieldEnum)[keyof typeof ToDoListItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    posts?: PostListRelationFilter
    lists?: ToDoListListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    posts?: PostOrderByRelationAggregateInput
    lists?: ToDoListOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type ActivePageWhereInput = {
    AND?: Enumerable<ActivePageWhereInput>
    OR?: Enumerable<ActivePageWhereInput>
    NOT?: Enumerable<ActivePageWhereInput>
    id?: IntFilter | number
    link?: StringFilter | string
  }

  export type ActivePageOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type ActivePageWhereUniqueInput = {
    id?: number
  }

  export type ActivePageOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    _count?: ActivePageCountOrderByAggregateInput
    _avg?: ActivePageAvgOrderByAggregateInput
    _max?: ActivePageMaxOrderByAggregateInput
    _min?: ActivePageMinOrderByAggregateInput
    _sum?: ActivePageSumOrderByAggregateInput
  }

  export type ActivePageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActivePageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActivePageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActivePageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    link?: StringWithAggregatesFilter | string
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolNullableFilter | boolean | null
    author?: XOR<UserRelationFilter, UserWhereInput> | null
    authorId?: IntNullableFilter | number | null
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    author?: UserOrderByWithRelationInput
    authorId?: SortOrder
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    content?: StringNullableWithAggregatesFilter | string | null
    published?: BoolNullableWithAggregatesFilter | boolean | null
    authorId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ToDoListWhereInput = {
    AND?: Enumerable<ToDoListWhereInput>
    OR?: Enumerable<ToDoListWhereInput>
    NOT?: Enumerable<ToDoListWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput> | null
    authorId?: IntNullableFilter | number | null
    items?: ToDoListItemListRelationFilter
  }

  export type ToDoListOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: UserOrderByWithRelationInput
    authorId?: SortOrder
    items?: ToDoListItemOrderByRelationAggregateInput
  }

  export type ToDoListWhereUniqueInput = {
    id?: number
  }

  export type ToDoListOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    _count?: ToDoListCountOrderByAggregateInput
    _avg?: ToDoListAvgOrderByAggregateInput
    _max?: ToDoListMaxOrderByAggregateInput
    _min?: ToDoListMinOrderByAggregateInput
    _sum?: ToDoListSumOrderByAggregateInput
  }

  export type ToDoListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ToDoListScalarWhereWithAggregatesInput>
    OR?: Enumerable<ToDoListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ToDoListScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    authorId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ToDoListItemWhereInput = {
    AND?: Enumerable<ToDoListItemWhereInput>
    OR?: Enumerable<ToDoListItemWhereInput>
    NOT?: Enumerable<ToDoListItemWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    parentList?: XOR<ToDoListRelationFilter, ToDoListWhereInput> | null
    parentId?: IntNullableFilter | number | null
  }

  export type ToDoListItemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    parentList?: ToDoListOrderByWithRelationInput
    parentId?: SortOrder
  }

  export type ToDoListItemWhereUniqueInput = {
    id?: number
  }

  export type ToDoListItemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    parentId?: SortOrder
    _count?: ToDoListItemCountOrderByAggregateInput
    _avg?: ToDoListItemAvgOrderByAggregateInput
    _max?: ToDoListItemMaxOrderByAggregateInput
    _min?: ToDoListItemMinOrderByAggregateInput
    _sum?: ToDoListItemSumOrderByAggregateInput
  }

  export type ToDoListItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ToDoListItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ToDoListItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ToDoListItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    parentId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    posts?: PostCreateNestedManyWithoutAuthorInput
    lists?: ToDoListCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    lists?: ToDoListUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutAuthorInput
    lists?: ToDoListUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutAuthorInput
    lists?: ToDoListUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivePageCreateInput = {
    link: string
  }

  export type ActivePageUncheckedCreateInput = {
    id?: number
    link: string
  }

  export type ActivePageUpdateInput = {
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ActivePageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ActivePageCreateManyInput = {
    id?: number
    link: string
  }

  export type ActivePageUpdateManyMutationInput = {
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ActivePageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    title: string
    content?: string | null
    published?: boolean | null
    author?: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean | null
    authorId?: number | null
  }

  export type PostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
    author?: UserUpdateOneWithoutPostsInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostCreateManyInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean | null
    authorId?: number | null
  }

  export type PostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ToDoListCreateInput = {
    title: string
    author?: UserCreateNestedOneWithoutListsInput
    items?: ToDoListItemCreateNestedManyWithoutParentListInput
  }

  export type ToDoListUncheckedCreateInput = {
    id?: number
    title: string
    authorId?: number | null
    items?: ToDoListItemUncheckedCreateNestedManyWithoutParentListInput
  }

  export type ToDoListUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneWithoutListsInput
    items?: ToDoListItemUpdateManyWithoutParentListInput
  }

  export type ToDoListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: ToDoListItemUncheckedUpdateManyWithoutParentListInput
  }

  export type ToDoListCreateManyInput = {
    id?: number
    title: string
    authorId?: number | null
  }

  export type ToDoListUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ToDoListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ToDoListItemCreateInput = {
    title: string
    parentList?: ToDoListCreateNestedOneWithoutItemsInput
  }

  export type ToDoListItemUncheckedCreateInput = {
    id?: number
    title: string
    parentId?: number | null
  }

  export type ToDoListItemUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    parentList?: ToDoListUpdateOneWithoutItemsInput
  }

  export type ToDoListItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ToDoListItemCreateManyInput = {
    id?: number
    title: string
    parentId?: number | null
  }

  export type ToDoListItemUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ToDoListItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type ToDoListListRelationFilter = {
    every?: ToDoListWhereInput
    some?: ToDoListWhereInput
    none?: ToDoListWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToDoListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ActivePageCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type ActivePageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActivePageMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type ActivePageMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
  }

  export type ActivePageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ToDoListItemListRelationFilter = {
    every?: ToDoListItemWhereInput
    some?: ToDoListItemWhereInput
    none?: ToDoListItemWhereInput
  }

  export type ToDoListItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToDoListCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
  }

  export type ToDoListAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type ToDoListMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
  }

  export type ToDoListMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
  }

  export type ToDoListSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type ToDoListRelationFilter = {
    is?: ToDoListWhereInput | null
    isNot?: ToDoListWhereInput | null
  }

  export type ToDoListItemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    parentId?: SortOrder
  }

  export type ToDoListItemAvgOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type ToDoListItemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    parentId?: SortOrder
  }

  export type ToDoListItemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    parentId?: SortOrder
  }

  export type ToDoListItemSumOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ToDoListCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ToDoListCreateWithoutAuthorInput>, Enumerable<ToDoListUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ToDoListCreateOrConnectWithoutAuthorInput>
    createMany?: ToDoListCreateManyAuthorInputEnvelope
    connect?: Enumerable<ToDoListWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ToDoListUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ToDoListCreateWithoutAuthorInput>, Enumerable<ToDoListUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ToDoListCreateOrConnectWithoutAuthorInput>
    createMany?: ToDoListCreateManyAuthorInputEnvelope
    connect?: Enumerable<ToDoListWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PostUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ToDoListUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ToDoListCreateWithoutAuthorInput>, Enumerable<ToDoListUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ToDoListCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ToDoListUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ToDoListCreateManyAuthorInputEnvelope
    set?: Enumerable<ToDoListWhereUniqueInput>
    disconnect?: Enumerable<ToDoListWhereUniqueInput>
    delete?: Enumerable<ToDoListWhereUniqueInput>
    connect?: Enumerable<ToDoListWhereUniqueInput>
    update?: Enumerable<ToDoListUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ToDoListUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ToDoListScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ToDoListUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ToDoListCreateWithoutAuthorInput>, Enumerable<ToDoListUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ToDoListCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ToDoListUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ToDoListCreateManyAuthorInputEnvelope
    set?: Enumerable<ToDoListWhereUniqueInput>
    disconnect?: Enumerable<ToDoListWhereUniqueInput>
    delete?: Enumerable<ToDoListWhereUniqueInput>
    connect?: Enumerable<ToDoListWhereUniqueInput>
    update?: Enumerable<ToDoListUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ToDoListUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ToDoListScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutListsInput = {
    create?: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListsInput
    connect?: UserWhereUniqueInput
  }

  export type ToDoListItemCreateNestedManyWithoutParentListInput = {
    create?: XOR<Enumerable<ToDoListItemCreateWithoutParentListInput>, Enumerable<ToDoListItemUncheckedCreateWithoutParentListInput>>
    connectOrCreate?: Enumerable<ToDoListItemCreateOrConnectWithoutParentListInput>
    createMany?: ToDoListItemCreateManyParentListInputEnvelope
    connect?: Enumerable<ToDoListItemWhereUniqueInput>
  }

  export type ToDoListItemUncheckedCreateNestedManyWithoutParentListInput = {
    create?: XOR<Enumerable<ToDoListItemCreateWithoutParentListInput>, Enumerable<ToDoListItemUncheckedCreateWithoutParentListInput>>
    connectOrCreate?: Enumerable<ToDoListItemCreateOrConnectWithoutParentListInput>
    createMany?: ToDoListItemCreateManyParentListInputEnvelope
    connect?: Enumerable<ToDoListItemWhereUniqueInput>
  }

  export type UserUpdateOneWithoutListsInput = {
    create?: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutListsInput
    upsert?: UserUpsertWithoutListsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutListsInput, UserUncheckedUpdateWithoutListsInput>
  }

  export type ToDoListItemUpdateManyWithoutParentListInput = {
    create?: XOR<Enumerable<ToDoListItemCreateWithoutParentListInput>, Enumerable<ToDoListItemUncheckedCreateWithoutParentListInput>>
    connectOrCreate?: Enumerable<ToDoListItemCreateOrConnectWithoutParentListInput>
    upsert?: Enumerable<ToDoListItemUpsertWithWhereUniqueWithoutParentListInput>
    createMany?: ToDoListItemCreateManyParentListInputEnvelope
    set?: Enumerable<ToDoListItemWhereUniqueInput>
    disconnect?: Enumerable<ToDoListItemWhereUniqueInput>
    delete?: Enumerable<ToDoListItemWhereUniqueInput>
    connect?: Enumerable<ToDoListItemWhereUniqueInput>
    update?: Enumerable<ToDoListItemUpdateWithWhereUniqueWithoutParentListInput>
    updateMany?: Enumerable<ToDoListItemUpdateManyWithWhereWithoutParentListInput>
    deleteMany?: Enumerable<ToDoListItemScalarWhereInput>
  }

  export type ToDoListItemUncheckedUpdateManyWithoutParentListInput = {
    create?: XOR<Enumerable<ToDoListItemCreateWithoutParentListInput>, Enumerable<ToDoListItemUncheckedCreateWithoutParentListInput>>
    connectOrCreate?: Enumerable<ToDoListItemCreateOrConnectWithoutParentListInput>
    upsert?: Enumerable<ToDoListItemUpsertWithWhereUniqueWithoutParentListInput>
    createMany?: ToDoListItemCreateManyParentListInputEnvelope
    set?: Enumerable<ToDoListItemWhereUniqueInput>
    disconnect?: Enumerable<ToDoListItemWhereUniqueInput>
    delete?: Enumerable<ToDoListItemWhereUniqueInput>
    connect?: Enumerable<ToDoListItemWhereUniqueInput>
    update?: Enumerable<ToDoListItemUpdateWithWhereUniqueWithoutParentListInput>
    updateMany?: Enumerable<ToDoListItemUpdateManyWithWhereWithoutParentListInput>
    deleteMany?: Enumerable<ToDoListItemScalarWhereInput>
  }

  export type ToDoListCreateNestedOneWithoutItemsInput = {
    create?: XOR<ToDoListCreateWithoutItemsInput, ToDoListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ToDoListCreateOrConnectWithoutItemsInput
    connect?: ToDoListWhereUniqueInput
  }

  export type ToDoListUpdateOneWithoutItemsInput = {
    create?: XOR<ToDoListCreateWithoutItemsInput, ToDoListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ToDoListCreateOrConnectWithoutItemsInput
    upsert?: ToDoListUpsertWithoutItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ToDoListWhereUniqueInput
    update?: XOR<ToDoListUpdateWithoutItemsInput, ToDoListUncheckedUpdateWithoutItemsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type PostCreateWithoutAuthorInput = {
    title: string
    content?: string | null
    published?: boolean | null
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean | null
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: Enumerable<PostCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type ToDoListCreateWithoutAuthorInput = {
    title: string
    items?: ToDoListItemCreateNestedManyWithoutParentListInput
  }

  export type ToDoListUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    items?: ToDoListItemUncheckedCreateNestedManyWithoutParentListInput
  }

  export type ToDoListCreateOrConnectWithoutAuthorInput = {
    where: ToDoListWhereUniqueInput
    create: XOR<ToDoListCreateWithoutAuthorInput, ToDoListUncheckedCreateWithoutAuthorInput>
  }

  export type ToDoListCreateManyAuthorInputEnvelope = {
    data: Enumerable<ToDoListCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolNullableFilter | boolean | null
    authorId?: IntNullableFilter | number | null
  }

  export type ToDoListUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ToDoListWhereUniqueInput
    update: XOR<ToDoListUpdateWithoutAuthorInput, ToDoListUncheckedUpdateWithoutAuthorInput>
    create: XOR<ToDoListCreateWithoutAuthorInput, ToDoListUncheckedCreateWithoutAuthorInput>
  }

  export type ToDoListUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ToDoListWhereUniqueInput
    data: XOR<ToDoListUpdateWithoutAuthorInput, ToDoListUncheckedUpdateWithoutAuthorInput>
  }

  export type ToDoListUpdateManyWithWhereWithoutAuthorInput = {
    where: ToDoListScalarWhereInput
    data: XOR<ToDoListUpdateManyMutationInput, ToDoListUncheckedUpdateManyWithoutListsInput>
  }

  export type ToDoListScalarWhereInput = {
    AND?: Enumerable<ToDoListScalarWhereInput>
    OR?: Enumerable<ToDoListScalarWhereInput>
    NOT?: Enumerable<ToDoListScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    authorId?: IntNullableFilter | number | null
  }

  export type UserCreateWithoutPostsInput = {
    email: string
    name?: string | null
    lists?: ToDoListCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: number
    email: string
    name?: string | null
    lists?: ToDoListUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    lists?: ToDoListUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    lists?: ToDoListUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserCreateWithoutListsInput = {
    email: string
    name?: string | null
    posts?: PostCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutListsInput = {
    id?: number
    email: string
    name?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
  }

  export type ToDoListItemCreateWithoutParentListInput = {
    title: string
  }

  export type ToDoListItemUncheckedCreateWithoutParentListInput = {
    id?: number
    title: string
  }

  export type ToDoListItemCreateOrConnectWithoutParentListInput = {
    where: ToDoListItemWhereUniqueInput
    create: XOR<ToDoListItemCreateWithoutParentListInput, ToDoListItemUncheckedCreateWithoutParentListInput>
  }

  export type ToDoListItemCreateManyParentListInputEnvelope = {
    data: Enumerable<ToDoListItemCreateManyParentListInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutListsInput = {
    update: XOR<UserUpdateWithoutListsInput, UserUncheckedUpdateWithoutListsInput>
    create: XOR<UserCreateWithoutListsInput, UserUncheckedCreateWithoutListsInput>
  }

  export type UserUpdateWithoutListsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutAuthorInput
  }

  export type ToDoListItemUpsertWithWhereUniqueWithoutParentListInput = {
    where: ToDoListItemWhereUniqueInput
    update: XOR<ToDoListItemUpdateWithoutParentListInput, ToDoListItemUncheckedUpdateWithoutParentListInput>
    create: XOR<ToDoListItemCreateWithoutParentListInput, ToDoListItemUncheckedCreateWithoutParentListInput>
  }

  export type ToDoListItemUpdateWithWhereUniqueWithoutParentListInput = {
    where: ToDoListItemWhereUniqueInput
    data: XOR<ToDoListItemUpdateWithoutParentListInput, ToDoListItemUncheckedUpdateWithoutParentListInput>
  }

  export type ToDoListItemUpdateManyWithWhereWithoutParentListInput = {
    where: ToDoListItemScalarWhereInput
    data: XOR<ToDoListItemUpdateManyMutationInput, ToDoListItemUncheckedUpdateManyWithoutItemsInput>
  }

  export type ToDoListItemScalarWhereInput = {
    AND?: Enumerable<ToDoListItemScalarWhereInput>
    OR?: Enumerable<ToDoListItemScalarWhereInput>
    NOT?: Enumerable<ToDoListItemScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    parentId?: IntNullableFilter | number | null
  }

  export type ToDoListCreateWithoutItemsInput = {
    title: string
    author?: UserCreateNestedOneWithoutListsInput
  }

  export type ToDoListUncheckedCreateWithoutItemsInput = {
    id?: number
    title: string
    authorId?: number | null
  }

  export type ToDoListCreateOrConnectWithoutItemsInput = {
    where: ToDoListWhereUniqueInput
    create: XOR<ToDoListCreateWithoutItemsInput, ToDoListUncheckedCreateWithoutItemsInput>
  }

  export type ToDoListUpsertWithoutItemsInput = {
    update: XOR<ToDoListUpdateWithoutItemsInput, ToDoListUncheckedUpdateWithoutItemsInput>
    create: XOR<ToDoListCreateWithoutItemsInput, ToDoListUncheckedCreateWithoutItemsInput>
  }

  export type ToDoListUpdateWithoutItemsInput = {
    title?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneWithoutListsInput
  }

  export type ToDoListUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostCreateManyAuthorInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean | null
  }

  export type ToDoListCreateManyAuthorInput = {
    id?: number
    title: string
  }

  export type PostUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ToDoListUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    items?: ToDoListItemUpdateManyWithoutParentListInput
  }

  export type ToDoListUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    items?: ToDoListItemUncheckedUpdateManyWithoutParentListInput
  }

  export type ToDoListUncheckedUpdateManyWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ToDoListItemCreateManyParentListInput = {
    id?: number
    title: string
  }

  export type ToDoListItemUpdateWithoutParentListInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ToDoListItemUncheckedUpdateWithoutParentListInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type ToDoListItemUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}